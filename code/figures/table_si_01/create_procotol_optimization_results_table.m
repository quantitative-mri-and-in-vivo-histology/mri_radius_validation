% ========================================================================
% Creates latex summary table for optimized in-vivo protocols, including 
% all protocol parameters and metrics.
% ========================================================================

% load data
opt = load(fullfile(getenv("MRV_DATA_PATH"), ...
    "/simulations/protocol_optimization_rois.mat"));

% extract table rows with best protocols for each combination of scanner,
% SNR baseline level and histology scaling factor
best_protocols_table = table();
for snr_baseline_index = 1:length(opt.snr_factors)
    for scanner_index = 1:length(opt.g_max_scanners)
        for scaling_factor_index = 1:length(opt.scaling_factors)
       
            % find protocol candidates
            roi_idx = abs(opt.results_table.g_max ...
                - opt.g_max_scanners(scanner_index)) < 1e-1...
                & abs(opt.results_table.scaling_factor ...
                - opt.scaling_factors(scaling_factor_index)) < 1e-3...
                & abs(opt.results_table.snr_factor ...
                - opt.snr_factors(snr_baseline_index)) < 1e-3 ...
                & opt.results_table.p <= inf;
            
            % determine protocol with highest R from candidates
            roi_table = opt.results_table(roi_idx,:);
            [~, best_roi_idx] = max(roi_table.R, [], 'omitnan');  
            best_protocols_table = [best_protocols_table; ...
                roi_table(best_roi_idx,:)];
        end
    end
end

% enforce desired column order
row_order = {'snr_factor', ...
    'scaling_factor', ...
    'g_max', ...
    'small_delta', ...
    'big_delta', ...
    'g_min', ...
    'b_min', ...
    'b_max', ...
    't_e', ...
    'snr', ...
    'R', ...
    'p', ...
    'nrmse', ...
    'fit_success_ratio'};
best_protocols_table = best_protocols_table(:, row_order);
best_protocols_table = sortrows(best_protocols_table, row_order);

%%

snr_baseline_names = strings(1, length(opt.snr_factors));
for snr_factor_index = 1:length(opt.snr_factors)
    if opt.snr_factors(snr_factor_index) == 1
        snr_baseline_names(snr_factor_index) = "reference";
    else 
        snr_baseline_names(snr_factor_index) = sprintf( ...
            "$%d \\%%$ increased", ...
            round(opt.snr_factors(snr_factor_index)*100-100));
    end
end

lines = [];
out_file = "table_protocol_optimization_results.tex";
lines = [lines; "\begin{tabular*}{1.0\linewidth}{r|r|rrrrrrrrrrr}"];
lines = [lines; "\hline"];

header_line = "\multirowcell{2}{$\mathrm{SNR}$\\$\mathrm{baseline}$}" + ...
	"& \multirowcell{2}{$\eta$}" + ...
    "& \multirowcell{2}{$g_{\mathrm{max}}$\\$[\SI{}{\milli\tesla\per\meter}]$}" + ...
    "& \multirowcell{2}{$g_{\mathrm{min}}$\\$[\SI{}{\milli\tesla\per\meter}]$}" + ...
    "& \multirowcell{2}{$b_{\mathrm{max}}$\\$[\SI{}{\milli\second\per\square\micro\meter}]$}" + ...
    "& \multirowcell{2}{$\delta$\\$[\SI{}{\milli\second}]$}" + ...
    "& \multirowcell{2}{$\Delta$\\$[\SI{}{\milli\second}]$}" + ...
    "& \multirowcell{2}{$T_{\mathrm{E}}$\\$[\SI{}{\milli\second}]$}" + ...
    "& \multirowcell{2}{SNR}" + ...
    "& \multirowcell{2}{$R$}" + ...
    "& \multirowcell{2}{$p$}" + ...
    "& \multirowcell{2}{NRMSE\\$[\%]$}" + ...
    "& \multirowcell{2}{$S$\\$[\%]$}\\\\\hline";
lines = [lines; header_line];

row_lines = strings(1, height(best_protocols_table));
line_index = 1;
for snr_baseline_index = 1:length(opt.snr_factors)
    
    same_snr_idx = abs(best_protocols_table.snr_factor ...
        - opt.snr_factors(snr_baseline_index)) < 1e-3;
    snr_baseline_table = best_protocols_table(same_snr_idx,:);    
    snr_first_line_index = line_index;

    for scaling_factor_index = 1:length(opt.scaling_factors)
        same_scaling_factor_idx = ...
            abs(opt.scaling_factors(scaling_factor_index) ...
            - snr_baseline_table.scaling_factor) < 1e-3;
        scaling_factor_table = ...
            snr_baseline_table(same_scaling_factor_idx,:);
        scaling_factor_first_first_line_index = line_index;
        
        [r_max, r_max_index] = max(scaling_factor_table.R);
            
        for row_index = 1:height(scaling_factor_table)
            row = scaling_factor_table(row_index,:);
            
            snr_str = "";
            if line_index == snr_first_line_index
                snr_str = sprintf( ...
                    "\\multirowcell{%d}{\\rotatebox[origin=c]{90}{%s}}", ...
                    height(snr_baseline_table), ...
                    snr_baseline_names(snr_baseline_index));
            end

            scaling_factor_str = "";
            if line_index == scaling_factor_first_first_line_index
                scaling_factor_str = sprintf("\\multirowcell{%d}{%.1f}", ...
                    height(scaling_factor_table), ...
                    opt.scaling_factors(scaling_factor_index));
            end

            if row.p  < 1e-3
                p_str = sprintf("$< 1e^{-3}$");
            else
                p_str = sprintf("$%.1f e^{%d}$",  ...
                    row.p /10^floor(log10(row.p )), floor(log10(row.p )));
            end

            if row_index == r_max_index
                row_line = sprintf("%s & %s & \\textbf{%d} & \\textbf{%.1f} & \\textbf{%.1f} & \\textbf{%d} & \\textbf{%d} & \\textbf{%d} & \\textbf{%.1f} & \\textbf{%.2f} & \\textbf{%s} & \\textbf{%.1f} & \\textbf{%.1f}\\\\",...
                    snr_str, ...
                    scaling_factor_str, ...
                    row.g_max, ...
                    row.g_min, ...
                    row.b_max, ...
                    row.small_delta,...
                    row.big_delta, ...
                    round(row.t_e), ...
                    row.snr, ...
                    row.R,  ...
                    p_str, ...
                    row.nrmse*100,...
                    row.fit_success_ratio*100); 
            else
                row_line = sprintf("%s & %s & %d & %.1f & %.1f & %d & %d & %d & %.1f & %.2f & %s & %.1f & %.1f \\\\",...
                    snr_str, ...
                    scaling_factor_str, ...
                    row.g_max, ...
                    row.g_min, ...
                    row.b_max, ...
                    row.small_delta,...
                    row.big_delta, ...
                    round(row.t_e), ...
                    row.snr, ...
                    row.R, ...
                    p_str, ...
                    row.nrmse*100, ...
                    row.fit_success_ratio*100); 
            end
            row_lines(line_index) = row_line;
            line_index = line_index + 1;
        end
        
        if line_index ~= snr_first_line_index + height(snr_baseline_table)
            row_lines(line_index-1) = row_lines(line_index-1) ...
                + sprintf("\\cmidrule{2-%d}", width(best_protocols_table)-1);
        end
    end

    row_lines(line_index-1) = row_lines(line_index-1) + "\hline";
end
lines = [lines; row_lines'];
lines = [lines; "\end{tabular*}"];
writelines(lines, out_file);
