% ========================================================================
% Illustrate effect of Gaussian versus Rician noise on effective radius
% estimation, using the experimental in-vivo dMRI protocol
% ========================================================================

%% set up
roi_info_table = readtable(fullfile(getenv("MRV_DATA_PATH"), ...
    "histology/rawdata/roiinfo.tsv"), ...
    "FileType", "text", ...
    "Delimiter", "\t", ...
    "TextType", "string");
sim_params = get_default_simulation_parameters();
% sim_params.radius_approximation = "minor_axis";


%% ex-vivo dMRI simulations
% load parameters and precomputed signals per axon radius table
mr_protocol_ex_vivo = MrProtocol.fromJsonFile(...
    "../../../parameters/mr_protocol_ex_vivo_experimental.json");
tissue_params_ex_vivo = jsondecode(fileread( ...
    "../../../parameters/tissue_params_ex_vivo.json"));
signal_lut_ex_vivo = load(fullfile(getenv("MRV_DATA_PATH"), ...
    "simulations/signal_per_radius_ex_vivo_experimental.mat"));

% get histograms with ex-vivo tissue scaling
[r_roi_counts_ex_vivo_circ_eq, r_effs_reference_ex_vivo_circ_eq] = get_histology_data(...
    fullfile(getenv("MRV_DATA_PATH")),...
    sim_params.r_bin_edges,...
    "circular_equivalent",...
    "scaling_factor", tissue_params_ex_vivo.histology_scaling_factor);

% get histograms with ex-vivo tissue scaling
[r_roi_counts_ex_vivo_minor_axis, r_effs_reference_ex_vivo_minor_axis] = get_histology_data(...
    fullfile(getenv("MRV_DATA_PATH")),...
    sim_params.r_bin_edges,...
    "minor_axis",...
    "scaling_factor", tissue_params_ex_vivo.histology_scaling_factor);

% get histograms with ex-vivo tissue scaling
[r_roi_counts_ex_vivo_major_axis, r_effs_reference_ex_vivo_major_axis] = get_histology_data(...
    fullfile(getenv("MRV_DATA_PATH")),...
    sim_params.r_bin_edges,...
    "major_axis",...
    "scaling_factor", tissue_params_ex_vivo.histology_scaling_factor);

radius_approximations = ["minor_axis", "circular_equivalent", "major_axis"];
r_roi_counts = zeros([3, size(r_roi_counts_ex_vivo_circ_eq)]);
r_roi_counts(1,:,:) = r_roi_counts_ex_vivo_minor_axis;
r_roi_counts(2,:,:) = r_roi_counts_ex_vivo_circ_eq;
r_roi_counts(3,:,:) = r_roi_counts_ex_vivo_major_axis;


mr_protocol_ex_vivo = MrProtocol.fromJsonFile( ...
    "../../../parameters/mr_protocol_ex_vivo_experimental.json");
tissue_params_ex_vivo = jsondecode(fileread( ....
    "../../../parameters/tissue_params_ex_vivo.json"));
signal_lut_ex_vivo = load(fullfile(getenv("MRV_DATA_PATH"), ...
    "/simulations/signal_per_radius_ex_vivo_experimental.mat"));

mr_protocol_in_vivo = MrProtocol.fromJsonFile( ...
    "../../../parameters/mr_protocol_in_vivo_experimental.json");
tissue_params_in_vivo = jsondecode(fileread( ....
    "../../../parameters/tissue_params_in_vivo.json"));
signal_lut_in_vivo = load(fullfile(getenv("MRV_DATA_PATH"), ...
    "/simulations/signal_per_radius_in_vivo_experimental.mat"));

% set up histology scaling factors
in_vivo_scaling_factors = [0.5 1 1.15]*1.3;
ex_vivo_scaling_factors = [0.5 1 1.15]*1.0;
scaling_factors = [in_vivo_scaling_factors; 
    ex_vivo_scaling_factors];


signal_luts = {signal_lut_ex_vivo.signal_per_r, ...
    squeeze(signal_lut_in_vivo.signal_per_r)};
mr_protocols = {mr_protocol_ex_vivo, mr_protocol_in_vivo};
tissue_params = [...
    tissue_params_ex_vivo, ...
    tissue_params_in_vivo];


%%
r_eff_reference = cell(length(mr_protocols), size(scaling_factors,2));
r_eff_simulated = cell(length(mr_protocols), size(scaling_factors,2));
for protocol_index = 1:length(mr_protocols)
    for radius_approx_index = 1:length(radius_approximations)

    % get histograms with tissue scaling
    [r_roi_counts, ...
        r_eff_reference{protocol_index,radius_approx_index}] = ...
        get_histology_data(...
        fullfile(getenv("MRV_DATA_PATH")),...
        sim_params.r_bin_edges,...
        radius_approximations(radius_approx_index),...
        "scaling_factor", tissue_params(protocol_index).histology_scaling_factor);

    % compute matrix signals
    signals_per_roi = compute_ensemble_weighted_signal( ...
        sim_params.r_bin_centers, ...
        r_roi_counts, ...
        squeeze(signal_luts{protocol_index}));
    r_eff_simulated{protocol_index,radius_approx_index} = ...
        simulate_experimental_r_eff_estimation( ...
        signals_per_roi, ...
        mr_protocols{protocol_index}, ...
        tissue_params(protocol_index).d_0, ...
        "powder_average", "gaussian_ml", ...
        "f_im_estimate", tissue_params(protocol_index).f_im);
    end
end

%% plot
% set up subplots
fig_handle  = figure;
set(fig_handle, get_default_figure_settings());
set(gcf,'units','centimeters','position',[0, 0, 12, 8]);
layout = tiledlayout(1, 2, ...
    "TileSpacing", "compact", ...
    "Padding", "tight");
color_order = get_default_color_order();
plot_axes = gobjects(1, 2);

scanner_names = [...
    "\textbf{ex-vivo}",...
    "\textbf{in-vivo}"];

scaling_factor_prefixes = ["Rat CC ", "Human CC ", "Human CST "];

% plot correlations for each configuration
for protocol_index = 1:length(tissue_params)   

    % create inner layout to position title above legend
    inner_layout = tiledlayout(layout, 1, 1, ...
        "TileSpacing", "tight", ...
        "Padding", "tight");
    inner_layout.Layout.Tile = protocol_index;
    title_str = scanner_names(protocol_index);
    title(inner_layout, ...
        title_str, ...
        "FontSize", 10, ...
        'interpreter', 'latex');
    plot_axes(protocol_index) = nexttile(inner_layout);
    hold on;

    % plot actual correlation
    for radius_approx_index = 1:length(radius_approximations)
        plot_r_eff_correlation_ensemble( ...
            plot_axes(protocol_index), ...
            r_eff_reference{protocol_index, radius_approx_index}, ...
            r_eff_simulated{protocol_index, radius_approx_index}, ...
            'color', color_order(radius_approx_index,:), ...
            'xlim', [0 6], ...
            'ylim', [0 5], ...
            'plot_error_metrics', false, ...
            'legend_prefix', ...
            radius_approximations(radius_approx_index));  
        xlabel('$r_{\mathrm{eff}}$ [$\mu$m] (histology)', ...
            'Interpreter', 'latex');
        ylabel("$r_{\mathrm{eff}}$ [$\mu$m] (dMRI sim.)", ...
            'Interpreter', 'latex');
        lgd = legend('Interpreter', 'latex', ...
            'Location', 'northoutside', ...
            'FontSize', 6);
        lgd.ItemTokenSize(1) = 15;
    end
end
