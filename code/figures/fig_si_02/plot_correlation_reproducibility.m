% ========================================================================
% Assess reproducibility of correlation between in-vivo dMRI-based and 
% histological r_eff across 10 in-vivo dMRI processing iterations.
% ========================================================================

%% set up
roi_info_table = readtable(fullfile(getenv("MRV_DATA_PATH"), ...
    "histology/rawdata/roiinfo.tsv"), ...
    "FileType", "text", ...
    "Delimiter", "\t", ...
    "TextType", "string");
sim_params = get_default_simulation_parameters();
cc_eval_params = jsondecode(fileread(...
    "../../../parameters/cc_evaluation_parameters.json"));

%% in-vivo dMRI simulations
% load parameters and signal LUT for in-vivo simulations
mr_protocol_in_vivo = MrProtocol.fromJsonFile(...
    "../../../parameters/mr_protocol_in_vivo_experimental.json");
tissue_params_in_vivo = jsondecode(fileread( ...
    "../../../parameters/tissue_params_in_vivo.json"));
signal_lut_in_vivo = load(fullfile(getenv("MRV_DATA_PATH"), ...
    "simulations/signal_per_radius_in_vivo_experimental.mat"));

% get in-vivo-like axon radius distributions and r_eff
[r_roi_counts_in_vivo, r_eff_reference_in_vivo] = get_histology_data(...
    fullfile(getenv("MRV_DATA_PATH")), ...
    sim_params.r_bin_edges, ...
    sim_params.radius_approximation, ...
    "scaling_factor", tissue_params_in_vivo.histology_scaling_factor);

% compute ROI signals
signals_per_roi_in_vivo = compute_ensemble_weighted_signal( ...
    sim_params.r_bin_centers, ...
    r_roi_counts_in_vivo, ...
    squeeze(signal_lut_in_vivo.signal_per_r));


%% plots
% set up figure
N_iterations = 10;
fig_handle  = figure;
set(fig_handle, get_default_figure_settings());
set(gcf,'units','centimeters','position',[0, 0, 18.4, 11.0]);
t = tiledlayout(2, N_iterations/2, ...
    "TileSpacing", "compact", ...
    "Padding", "compact");
plot_axes = gobjects(1, N_iterations);
color_order = get_default_color_order();
color_in_vivo = color_order(1,:);
legend_prefix_in_vivo = "in-vivo ";
lims = [0 4];

for iter_index = 1:N_iterations

    % get r_eff maps of all subjects
    processed_data_dir = fullfile(getenv("MRV_DATA_PATH"), ...
        sprintf("mri_in_vivo/processed_%d", iter_index));
    processed_subj_dir_fstructs = dir(fullfile(processed_data_dir, "sub*"));
    
    subject_id_first = sscanf(processed_subj_dir_fstructs(1).name, 'sub-%s');
    r_eff_image_example = niftiread(fullfile(processed_data_dir, ...
        sprintf("sub-%s/dwi/sub-%s_effectiveRadius.nii.gz", ...
        subject_id_first, subject_id_first))); 
    r_eff_mri_values = cell(height(roi_info_table), 1);
    r_eff_mri_mean_values_per_subject = ...
        zeros(height(roi_info_table), length(processed_subj_dir_fstructs));
    r_eff_mri_values_per_sub = ...
        zeros(height(roi_info_table), length(processed_subj_dir_fstructs));
    
    for subject_id_index = 1:length(processed_subj_dir_fstructs)
        subject_id = sscanf( ...
            processed_subj_dir_fstructs(subject_id_index).name, 'sub-%s');
    
        % read images
        r_eff_image_file = fullfile(processed_data_dir, ...
            sprintf("sub-%s/dwi/" + ...
            "sub-%s_roi-cc_desc-smoothed_effectiveRadius.nii.gz", ...
            subject_id, subject_id));
        r_eff_image = niftiread(r_eff_image_file);
        fa_image = niftiread(fullfile(processed_data_dir, ...
            sprintf("sub-%s/dwi/sub-%s_FA.nii.gz", ...
            subject_id, subject_id)));
        cc_atlas_mask = niftiread(fullfile(processed_data_dir, ...
            sprintf("sub-%s/dwi/" + ...
            "sub-%s_label-ccMid_mask.nii.gz", ...
            subject_id, subject_id)));
    
        % exclude values outside corpus callosum
        cc_mask = cc_atlas_mask > 0 ...
            & fa_image >= cc_eval_params.fa_min ...
            & r_eff_image >= cc_eval_params.r_eff_min;
        r_eff_image(~cc_mask) = nan;
    
        % extract values at ROI coordinates
        loc_table = readtable(fullfile(processed_data_dir, ...
            sprintf("sub-%s/dwi/sub-%s_roiinfo.tsv", ...
            subject_id, subject_id)), ...
            "FileType", "text", ...
            "Delimiter", "\t");
        sub_table = loc_table(:, ...
            ["native_voxel_x", "native_voxel_y", "native_voxel_z"]);  
        loc_voxels = int16(round(sub_table.Variables)+1);
        for roi_index = 1:length(r_eff_mri_values)
            x = loc_voxels(roi_index,1);
            y = loc_voxels(roi_index,2);
            z = loc_voxels(roi_index,3);
            r_eff_mri_values_per_sub(roi_index, subject_id_index) = ...
                r_eff_image(x, y, z);
        end
    end
    
    % filter ROIs with less than 3 subjects
    valid_idx = sum(~isnan(r_eff_mri_values_per_sub),2) >= 3; 
    r_eff_mri_mean_values = mean(r_eff_mri_values_per_sub, 2, 'omitnan');
    r_eff_histo_mean_values = r_eff_reference_in_vivo';
    % r_eff_mri_mean_values = r_eff_mri_mean_values(valid_idx);
    % r_eff_histo_mean_values = r_eff_histo_mean_values(valid_idx);
    r_eff_mri_mean_values(~valid_idx) = nan;

    % plot MRI-histology comparison
    current_ax = nexttile(t);
    plot_axes(iter_index) = current_ax;
    rand_stream = RandStream(sim_params.random_generator, ...
        'Seed', sim_params.random_seed);
    plot_r_eff_correlation_ensemble(current_ax, ...
        r_eff_histo_mean_values', ...
        r_eff_mri_mean_values, ...
        'color', color_in_vivo, ...
        'xlim', lims, ...
        'ylim', lims, ...
        'rand_stream', rand_stream);
    xlabel('$r_{\mathrm{eff}}$ [$\mu$m] (histology)', ...
        'Interpreter', 'latex');
    ylabel("$r_{\mathrm{eff}}$ [$\mu$m] (dMRI)", ...
        'Interpreter', 'latex');
    lgd = legend('Interpreter', 'latex', ...
        'Location', 'northoutside', ...
        'FontSize', 5);
    lgd.ItemTokenSize(1) = 10;
end
add_subfigure_labels(plot_axes, "char", "pos", [-0.27, 1.42]);

% save figure
print(gcf, '-dsvg', "correlation_reproducibility.svg");
