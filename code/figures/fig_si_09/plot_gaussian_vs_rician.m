% ========================================================================
% Illustrate effect of Gaussian versus Rician noise on effective radius
% estimation, using the experimental in-vivo dMRI protocol
% ========================================================================

%% set up
roi_info_table = readtable(fullfile(getenv("MRV_DATA_PATH"), ...
    "histology/rawdata/roiinfo.tsv"), ...
    "FileType", "text", ...
    "Delimiter", "\t", ...
    "TextType", "string");
sim_params = get_default_simulation_parameters();


%% ex-vivo dMRI simulations
% load parameters and precomputed signals per axon radius table
mr_protocol_ex_vivo = MrProtocol.fromJsonFile(...
    "../../../parameters/mr_protocol_ex_vivo_experimental.json");
tissue_params_ex_vivo = jsondecode(fileread( ...
    "../../../parameters/tissue_params_ex_vivo.json"));
signal_lut_ex_vivo = load(fullfile(getenv("MRV_DATA_PATH"), ...
    "simulations/signal_per_radius_ex_vivo_experimental.mat"));

% get histograms with ex-vivo tissue scaling
[r_roi_counts_ex_vivo, r_effs_reference_ex_vivo] = get_histology_data(...
    fullfile(getenv("MRV_DATA_PATH")),...
    sim_params.r_bin_edges,...
    sim_params.radius_approximation,...
    "scaling_factor", tissue_params_ex_vivo.histology_scaling_factor);

% filter histology data for ex-vivo subjects (only subject 1)
ex_vivo_histo_row_mask = roi_info_table.subject_id == "ev01";
r_roi_counts_ex_vivo = r_roi_counts_ex_vivo(ex_vivo_histo_row_mask, :);
r_effs_reference_ex_vivo = ...
    r_effs_reference_ex_vivo(ex_vivo_histo_row_mask);

% compute histogram-weighted signals per diffusion direction
signals_per_roi_ex_vivo = compute_ensemble_weighted_signal( ...
    sim_params.r_bin_centers, ...
    r_roi_counts_ex_vivo, ...
    squeeze(signal_lut_ex_vivo.signal_per_r));

% simulate estimated r_eff for Rician dist. signals
rand_stream = RandStream(sim_params.random_generator, ...
    'Seed', sim_params.random_seed);
r_eff_simulated_ex_vivo_rician = ... 
    simulate_experimental_r_eff_estimation( ...
    signals_per_roi_ex_vivo, ...
    mr_protocol_ex_vivo, ...
    tissue_params_ex_vivo.d_0, ...
    "noise_type", "rician", ...
    "powder_average", "rician_ml", ...
    "noise_level", 1./mr_protocol_ex_vivo.snr, ...
    "noise_level_estimate", 1./mr_protocol_ex_vivo.snr, ...
    "f_im_estimate", tissue_params_ex_vivo.f_im, ...
    "rand_stream", rand_stream);

% simulate estimated r_eff for Gaussian dist. signals
rand_stream = RandStream(sim_params.random_generator, ...
    'Seed', sim_params.random_seed);
r_eff_simulated_ex_vivo_gaussian = ...
    simulate_experimental_r_eff_estimation( ...
    signals_per_roi_ex_vivo, ...
    mr_protocol_ex_vivo, ...
    tissue_params_ex_vivo.d_0, ...
    "noise_type", "gaussian", ...
    "powder_average", "gaussian_ml", ...
    "noise_level", 1./mr_protocol_ex_vivo.snr, ...
    "f_im_estimate", tissue_params_ex_vivo.f_im, ...
    "rand_stream", rand_stream);


%% in-vivo dMRI simulations
% load parameters and precomputed signals per axon radius table
mr_protocol_in_vivo = MrProtocol.fromJsonFile(...
    "../../../parameters/mr_protocol_in_vivo_experimental.json");
tissue_params_in_vivo = jsondecode(fileread( ...
    "../../../parameters/tissue_params_in_vivo.json"));
signal_lut_in_vivo = load(fullfile(getenv("MRV_DATA_PATH"), ...
    "simulations/signal_per_radius_in_vivo_experimental.mat"));
% get histograms with ex-vivo tissue scaling
[r_roi_counts_in_vivo, r_effs_reference_in_vivo] = get_histology_data(...
    fullfile(getenv("MRV_DATA_PATH")),...
    sim_params.r_bin_edges,...
    sim_params.radius_approximation,...
    "scaling_factor", tissue_params_in_vivo.histology_scaling_factor);

% compute histogram-weighted signals per diffusion direction
signals_per_roi_in_vivo = compute_ensemble_weighted_signal( ...
    sim_params.r_bin_centers, ...
    r_roi_counts_in_vivo, ...
    squeeze(signal_lut_in_vivo.signal_per_r));

% simulate estimated r_eff for Rician dist. signals
rand_stream = RandStream(sim_params.random_generator, ...
    'Seed', sim_params.random_seed);
r_eff_simulated_in_vivo_rician = ...
    simulate_experimental_r_eff_estimation( ...
    signals_per_roi_in_vivo, ...
    mr_protocol_in_vivo, ...
    tissue_params_in_vivo.d_0, ...
    "noise_type", "rician", ...
    "powder_average", "rician_ml", ...
    "noise_level", 1./mr_protocol_in_vivo.snr, ...
    "noise_level_estimate", 1./mr_protocol_in_vivo.snr, ...
    "f_im_estimate", tissue_params_in_vivo.f_im, ...
    "rand_stream", rand_stream);

% simulate estimated r_eff for Gaussian dist. signals
rand_stream = RandStream(sim_params.random_generator, ...
    'Seed', sim_params.random_seed);
r_eff_simulated_in_vivo_gaussian = ...
    simulate_experimental_r_eff_estimation( ...
    signals_per_roi_in_vivo, ...
    mr_protocol_in_vivo, ...
    tissue_params_in_vivo.d_0, ...
    "noise_type", "gaussian", ...
    "powder_average", "gaussian_ml", ...
    "noise_level", 1./mr_protocol_in_vivo.snr, ...
    "f_im_estimate", tissue_params_in_vivo.f_im, ...
    "rand_stream", rand_stream);


%% plot results
% set up subfigures
fig_handle  = figure;
set(fig_handle, get_default_figure_settings());
set(gcf,'units','centimeters','position',[0, 0, 12.4, 9.5]);
layout = tiledlayout(1, 2, ...
    "TileSpacing", "loose", ...
    "Padding", "tight");
color_order = get_default_color_order();
color_ex_vivo = color_order(2,:);
color_in_vivo = color_order(1,:);
legend_prefix_rician = "Rician dist.: ";
legend_prefix_gaussian = "Gaussian dist.: ";
lims = [0 4];

% plot ex-vivo correlations
inner_layout = tiledlayout(layout, 1, 1, ...
    "TileSpacing", "tight", ...
    "Padding", "tight");
inner_layout.Layout.Tile = 1;
title(inner_layout, "Ex-vivo", ...
    "FontSize", 12, ...
    'interpreter', 'latex');
ax_ex_vivo = nexttile(inner_layout, 1);
hold on;

rand_stream = RandStream(sim_params.random_generator, ...
    'Seed', sim_params.random_seed);
plot_r_eff_correlation_ensemble(ax_ex_vivo, ...
    r_effs_reference_ex_vivo, ...
    r_eff_simulated_ex_vivo_rician, ...
    'color', color_ex_vivo, ...
    'legend_prefix', legend_prefix_rician, ...
    'marker', "square", ...
    'marker_size', 6, ...
    'regression_line_style', '-', ...
    'xlim', lims, ...
    'ylim', lims, ...
    'rand_stream', rand_stream);
rand_stream = RandStream(sim_params.random_generator, ...
    'Seed', sim_params.random_seed);
plot_r_eff_correlation_ensemble(ax_ex_vivo, ...
    r_effs_reference_ex_vivo, ...
    r_eff_simulated_ex_vivo_gaussian, ...
    'color', color_in_vivo, ...
    'legend_prefix', legend_prefix_gaussian, ...
    'xlim', lims, ...
    'ylim', lims, ...
    'rand_stream', rand_stream);
xlabel('$r_{\mathrm{eff}}$ [$\mu$m] (histology)', ...
    'Interpreter', 'latex');
ylabel({"$r_{\mathrm{eff}}$ [$\mu$m]", "(dMRI simulation)"}, ...
    'Interpreter', 'latex');
lgd = legend('Interpreter', 'latex', ...
    'Location', 'northoutside', ...
    'FontSize', 6.1);
lgd.ItemTokenSize(1) = 15;

% plot in-vivo correlations
inner_layout = tiledlayout(layout, 1, 1, ...
    "TileSpacing", "tight", ...
    "Padding", "tight");
inner_layout.Layout.Tile = 2;
title(inner_layout, "In-vivo", ...
    "FontSize", 12, ...
    'interpreter', 'latex');
ax_in_vivo = nexttile(inner_layout, 1);
hold on;

rand_stream = RandStream(sim_params.random_generator, ...
    'Seed', sim_params.random_seed);
plot_r_eff_correlation_ensemble(ax_in_vivo, ...
    r_effs_reference_in_vivo, ...
    r_eff_simulated_in_vivo_rician, ...
    'color', color_ex_vivo, ...
    'legend_prefix', legend_prefix_rician, ...
    'marker', "square", ...
    'marker_size', 6, ...
    'regression_line_style', '-', ...
    'xlim', lims, ...
    'ylim', lims, ...
    'rand_stream', rand_stream);
rand_stream = RandStream(sim_params.random_generator, ...
    'Seed', sim_params.random_seed);
plot_r_eff_correlation_ensemble(ax_in_vivo, ...
    r_effs_reference_in_vivo, ...
    r_eff_simulated_in_vivo_gaussian, ...
    'color', color_in_vivo, ...
    'legend_prefix', legend_prefix_gaussian, ...
    'xlim', lims, ...
    'ylim', lims, ...
    'rand_stream', rand_stream);
xlabel('$r_{\mathrm{eff}}$ [$\mu$m] (histology)', ...
    'Interpreter', 'latex');
ylabel({"$r_{\mathrm{eff}}$ [$\mu$m]", "(dMRI simulation)"}, ...
    'Interpreter', 'latex');
lgd = legend('Interpreter', 'latex', ...
    'Location', 'northoutside', ...
    'FontSize', 6.1);
lgd.ItemTokenSize(1) = 15;

% save_figure
print(gcf, '-dsvg', "gaussian_vs_rician.svg");
