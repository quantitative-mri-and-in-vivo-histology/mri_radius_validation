% ========================================================================
% Plot quantiative comparison with histlogy for optimal in-vivo scanner
% protocols.
% ========================================================================

%% extract protocol metrics
opt = load(fullfile(getenv("MRV_DATA_PATH"), ...
    "simulations/protocol_optimization_rois.mat"));

% determine optimal R and corresponding NRMSE for each combination of
% g_max and SNR baseline level
mr_protocols = cell(length(opt.g_max_scanners), ...
    length(opt.snr_factors), ...
    length(opt.scaling_factors));
signal_luts = cell(length(opt.g_max_scanners), ...
    length(opt.snr_factors), ...
    length(opt.scaling_factors));
for scaling_factor_index = 1:length(opt.scaling_factors)
    for snr_baseline_index = 1:length(opt.snr_factors)   
        for scanner_index = 1:length(opt.g_max_scanners)
            
            % find protocol candidates
            roi_idx = abs(opt.results_table.g_max ...
                - opt.g_max_scanners(scanner_index)) < 1e-1...
                & abs(opt.results_table.scaling_factor ...
                - opt.scaling_factors(scaling_factor_index)) < 1e-3...
                & abs(opt.results_table.snr_factor ...
                - opt.snr_factors(snr_baseline_index)) < 1e-3 ...
                & opt.results_table.p <= inf;
            
            % determine protocol with highest R from candidates
            roi_table = opt.results_table(roi_idx,:);
            [~, best_roi_idx] = max(roi_table.R, [], 'omitnan');
            
            % store protocols
            best_protocol_index = roi_table.protocol_index(best_roi_idx);
            mr_protocol = opt.mr_protocols{best_protocol_index};
            mr_protocol.snr = roi_table.snr(best_roi_idx);
            signal_luts{scanner_index, ...
            snr_baseline_index, scaling_factor_index} = squeeze( ...
                opt.signal_luts_intra_axonal(best_protocol_index, :, :));
            mr_protocols{scanner_index, ...
                snr_baseline_index, scaling_factor_index} = mr_protocol;
        end
    end
end


%%
r_eff_simulated = cell(length(opt.mr_protocols), ...
    length(opt.snr_factors), length(opt.scaling_factors));
r_eff_reference = cell(1, length(opt.scaling_factors));

for scaling_factor_index = 1:length(opt.scaling_factors)

    % get histograms with tissue scaling
    [r_roi_counts, r_eff_reference{scaling_factor_index}] = ...
        get_histology_data(...
        fullfile(getenv("MRV_DATA_PATH")),...
        opt.sim_params.r_bin_edges,...
        opt.sim_params.radius_approximation,...
        "scaling_factor", opt.tissue_params.histology_scaling_factor);

    for scanner_index = 1:length(mr_protocols)
        for snr_baseline_index = 1:length(opt.snr_factors)
        
            % compute matrix signals
            signals_per_roi_matrix = compute_ensemble_weighted_signal( ...
                opt.sim_params.r_bin_centers, ...
                r_roi_counts, ...
                squeeze(signal_luts{scanner_index, ...
                snr_baseline_index, scaling_factor_index}));
        
            rand_stream = RandStream(opt.sim_params.random_generator, ...
                'Seed', opt.sim_params.random_seed);
            r_eff_simulated{scanner_index, ...
                snr_baseline_index, scaling_factor_index} = ...
                simulate_experimental_r_eff_estimation( ...
                    signals_per_roi_matrix, ...
                    mr_protocols{scanner_index, ...
                    snr_baseline_index, scaling_factor_index}, ...
                    opt.tissue_params.d_0, ...
                    "noise_type", "gaussian", ...
                    "noise_level", 1./mr_protocols{scanner_index, ...
                        snr_baseline_index, scaling_factor_index}.snr, ...
                    "powder_average", "gaussian_ml", ...
                    "f_im_estimate", opt.tissue_params.f_im, ...
                    "rand_stream", rand_stream);
        end
    end
end



%% plot correlations
fig_handle = figure;
set(fig_handle, get_default_figure_settings());
set(gcf,'units', 'centimeters', ...
    'position', [0, 0, 18.4, 18.5]);
layout = tiledlayout(length(opt.scaling_factors), ...
    length(opt.g_max_scanners), ...
    "TileSpacing", "loose", ...
    "Padding", "compact");
plot_axes = gobjects(length(opt.scaling_factors), ...
    length(opt.g_max_scanners));
color_order = get_default_color_order();
lims = [0 4.5];
scanner_names = ["\textbf{in-vivo state-of-the-art}" + newline ...
    + "\textbf{clinical scanner}",...
    "\textbf{in-vivo next-generation}"  + newline ...
    + "\textbf{clinical scanner}",...
    "\textbf{in-vivo state-of-the-art}" + newline ...
    + "\textbf{research scanner}",...
    "\textbf{in-vivo next-generation}"  + newline ...
    + "\textbf{research scanner}",...
    "\textbf{ex-vivo}" + newline + "\textbf{preclinical scanner}"];

for scaling_factor_index = 1:length(opt.scaling_factors)
    for scanner_index = 1:length(opt.g_max_scanners)
        
        inner_layout = tiledlayout(layout, 1, 1, ...
            "TileSpacing", "tight", ...
            "Padding", "tight");
        inner_layout.Layout.Tile = (scaling_factor_index-1)*...
            length(opt.g_max_scanners)+scanner_index;
        plot_axes(scaling_factor_index, scanner_index) = ...
            nexttile(inner_layout);
        hold on;

        for snr_baseline_index = 1:length(opt.snr_factors)

            rand_stream = RandStream(opt.sim_params.random_generator, ...
                'Seed', opt.sim_params.random_seed);
            plot_r_eff_correlation_ensemble( ...
                plot_axes(scaling_factor_index, scanner_index), ...
                r_eff_reference{scaling_factor_index}, ...
                r_eff_simulated{scanner_index, ...
                snr_baseline_index, scaling_factor_index}, ...
                'color', color_order(snr_baseline_index,:), ...
                'xlim', [0 4.5], ...
                'ylim', [0 4.5], ...
                'plot_error_metrics', false, ...
                'plot_regression', false, ...
                'legend_prefix', sprintf("SNR=%d:", ...
                    round(mr_protocols{scanner_index, ...
                    snr_baseline_index, scaling_factor_index}.snr)), ...
                'rand_stream', rand_stream);
            xlabel('$r_{\mathrm{eff}}$ [$\mu$m] (histology)', ...
                'Interpreter', 'latex');
            ylabel("$r_{\mathrm{eff}}$ [$\mu$m] (dMRI sim.)", ...
                'Interpreter', 'latex');
            lgd = legend('Interpreter', 'latex', ...
                    'FontSize', 5.5);
            lgd.Location = "northoutside";
            lgd.ItemTokenSize(1) = 10;
        end 

        if scaling_factor_index == 1
            title_str = scanner_names(scanner_index) ...
                + newline + sprintf("$(g_{\\mathrm{max}} = %.1f)$", ...
                opt.g_max_scanners(scanner_index));
            title(inner_layout, title_str, ...
                'Interpreter', 'latex', ...
                'FontSize', 8); 
        end

        if scanner_index == 1
            row_title_str = sprintf("$\\mathbf{\\eta = %.1f}$", ...
                opt.scaling_factors(scaling_factor_index)) ...
                + newline + newline + ...
                plot_axes(scaling_factor_index,1).YLabel.String;
            ylabel(plot_axes(scaling_factor_index,1), row_title_str, ...
                'Interpreter', 'latex');
        end
    end
end

add_subfigure_labels(plot_axes, "char", "pos", [-0.28, 1.35]);

% save figure
print(gcf, '-dsvg', "optimized_correlations_all_scanners.svg");
