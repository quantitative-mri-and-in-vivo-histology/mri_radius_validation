% ========================================================================
% Statistical power simulation to differentiate ASD and control groups
% on next-generation clinical scanners
% ========================================================================

%% set up parameters
opt = load( ...
    fullfile(getenv("MRV_DATA_PATH"), ...
    "/simulations/protocol_optimization_rois.mat"));
roi_info_table = readtable( ...
    fullfile(getenv("MRV_DATA_PATH"), ...
    "histology/rawdata/roiinfo.tsv"), ...
    "FileType", "text", ...
    "Delimiter", "\t", ...
    "TextType", "string");
splenium_voxel_ids = find(startsWith(roi_info_table.roi_id, "S"));
g_max_next_gen_clinical = 180;

% extract Cima.X protocols and signal LUTs per SNR baseline level
mr_protocols = cell(1, length(opt.snr_factors));
signal_luts = cell(1, length(opt.snr_factors));
for snr_baseline_index = 1:length(opt.snr_factors)
    
    % find protocol with optimal R
    roi_idx = abs(opt.results_table.g_max ...
        - g_max_next_gen_clinical) < 1e-1...
        & abs(opt.results_table.scaling_factor ...
        - opt.tissue_params.histology_scaling_factor) < 1e-3...
        & abs(opt.results_table.snr_factor ...
        - opt.snr_factors(snr_baseline_index)) < 1e-3;    
    
    roi_table = opt.results_table(roi_idx,:);
    [~, best_roi_idx] = max(roi_table.R, [], "omitnan");

    % store protocol and signal lookup table
    best_protocol_index = roi_table.protocol_index(best_roi_idx);
    mr_protocol = opt.mr_protocols{best_protocol_index};
    mr_protocol.snr = roi_table.snr(best_roi_idx);
    signal_luts{snr_baseline_index} = ...
        squeeze(opt.signal_luts_intra_axonal(best_protocol_index, :, :));
    mr_protocols{snr_baseline_index} = mr_protocol;
end

%% simulate ROI signals
group_names = ["Control", "ASD"];
scaling_factors = [1.3 1.3*(1-0.286)];
signals_per_roi = cell(length(group_names), length(opt.snr_factors));

for group_index = 1:length(group_names)

    % simulate in-vivo like axon radius distributions
    r_counts = get_histology_data( ...
        fullfile(getenv("MRV_DATA_PATH")),...
        opt.sim_params.r_bin_edges, ...
        opt.sim_params.radius_approximation, ...
        "scaling_factor", scaling_factors(group_index));

    % extract distributions for splenium ROIs
    r_counts = r_counts(splenium_voxel_ids,:);

     % computed signals per ROI based on distributions 
    for snr_baseline_index = 1:length(opt.snr_factors)
        signals_per_roi{group_index, snr_baseline_index} = ...
            compute_ensemble_weighted_signal( ...
            opt.sim_params.r_bin_centers, ...
            r_counts, ...
            signal_luts{snr_baseline_index});
    end
end

%% monte carlo statistical power estimation
group_sizes = 1:1:20;
num_voxels = 11;
monte_carlo_iterations = 5000;
h_values = zeros(length(group_sizes), ...
    length(opt.snr_factors), ...
    monte_carlo_iterations);
% rand_stream = RandStream( ...
%     opt.sim_params.random_generator, 'Seed', opt.sim_params.random_seed);
sc = parallel.pool.Constant(RandStream(opt.sim_params.random_generator, ...
    'Seed', opt.sim_params.random_seed));

for group_size_index = 1:length(group_sizes)
    group_size = group_sizes(group_size_index);    
    for snr_baseline_index = 1:length(opt.snr_factors)
        h_per_iteration = zeros(1, monte_carlo_iterations);
        opt_tissue_params = opt.tissue_params;
        mr_protocol = mr_protocols{snr_baseline_index};

        parfor monte_carlo_index = 1:monte_carlo_iterations
            rand_stream = sc.Value;   
            rand_stream.Substream = monte_carlo_index;

            group_r_eff_sim_values_mean = ...
                nan(length(group_names), group_size);
            for group_index = 1:length(group_names)
                group_signals = ...
                    signals_per_roi{group_index, snr_baseline_index}; 
                random_sample_ids = datasample( ...
                    rand_stream, ...
                    1:length(splenium_voxel_ids), ...
                    num_voxels*group_size, ...
                    'Replace', true);
                group_r_eff_sim_values = ...
                    simulate_experimental_r_eff_estimation( ...
                    group_signals(:,random_sample_ids), ...
                    mr_protocol, ...
                    opt_tissue_params.d_0, ...
                    "noise_type", "gaussian", ...
                    "noise_level", 1/mr_protocol.snr, ...
                    "powder_average", "gaussian_ml", ...
                    "f_im_estimate", opt_tissue_params.f_im, ...
                    "n_noise_realizations", 1, ...
                    "rand_stream", rand_stream);
                group_r_eff_sim_values = reshape( ...
                    group_r_eff_sim_values, ...
                    group_size, ...
                    num_voxels); 
                group_r_eff_sim_values_mean(group_index,:) = ...
                    mean(group_r_eff_sim_values, 2, 'omitnan');
            end
            h_per_iteration(monte_carlo_index) = ttest( ...
                group_r_eff_sim_values_mean(1,:), ...
                group_r_eff_sim_values_mean(2,:));
        end
        h_values(group_size_index, snr_baseline_index,:) = h_per_iteration;  
    end
end

%% plot statistical power across SNR baseline levels
fig_handle  = figure;
set(fig_handle, get_default_figure_settings());
set(gcf, ...
    'units', 'centimeters', ...
    'position', [0, 0, 4.5, 4.5]);
color_order = get_default_color_order();
layout = tiledlayout(1, 1, ...
    "TileSpacing","tight", ...
    "Padding", "tight");
layout.TileSpacing = "loose";
nexttile(layout);
hold on;

for snr_baseline_index = 1:length(opt.snr_factors)
    plot(group_sizes, ...
        mean(h_values(:,snr_baseline_index,:), 3, 'omitnan'), ...
        'k-', ...
        'LineWidth', 1.5,...
        'Color', color_order(snr_baseline_index,:), ...
        'DisplayName', ...
        sprintf("SNR $\\approx$ %d", ...
            round(mr_protocols{snr_baseline_index}.snr)));
end

yline(0.9, 'k--', 'HandleVisibility', 'off');
yticks(0:0.1:1.0);
xticks(0:5:max(group_sizes));
ylim([0 1.0]);
ylabel("statistical power", 'interpreter', 'latex');
xlabel("group size", 'interpreter', 'latex');
box on;
lgd = legend('interpreter', 'latex');
lgd.Location = "southeast";
lgd.ItemTokenSize = [10, 10];

% save_figure
print(gcf, '-dsvg', "statistical_power_simulation.svg");
