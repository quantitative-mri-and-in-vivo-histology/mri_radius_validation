% ========================================================================
% Illustrate scaling behaviour of dMRI-based effective radii for different
% axon populations. To this end, extropolate human corpus callosum radii
% to the rat corpus callosum and the human cortical spinal tract.
% ========================================================================

%% setup

mr_protocol_ex_vivo = MrProtocol.fromJsonFile( ...
    "../../../parameters/mr_protocol_ex_vivo_experimental.json");
tissue_params_ex_vivo = jsondecode(fileread( ....
    "../../../parameters/tissue_params_ex_vivo.json"));
signal_lut_ex_vivo = load(fullfile(getenv("MRV_DATA_PATH"), ...
    "/simulations/signal_per_radius_ex_vivo_experimental.mat"));

mr_protocol_in_vivo = MrProtocol.fromJsonFile( ...
    "../../../parameters/mr_protocol_in_vivo_experimental.json");
tissue_params_in_vivo = jsondecode(fileread( ....
    "../../../parameters/tissue_params_in_vivo.json"));
signal_lut_in_vivo = load(fullfile(getenv("MRV_DATA_PATH"), ...
    "/simulations/signal_per_radius_in_vivo_experimental.mat"));

% set up histology scaling factors
in_vivo_scaling_factors = [0.5 1 1.15]*1.3;
ex_vivo_scaling_factors = [0.5 1 1.15]*1.0;
scaling_factors = [in_vivo_scaling_factors; 
    ex_vivo_scaling_factors];


signal_luts = {signal_lut_ex_vivo.signal_per_r, ...
    squeeze(signal_lut_in_vivo.signal_per_r)};
mr_protocols = {mr_protocol_ex_vivo, mr_protocol_in_vivo};
tissue_params = [...
    tissue_params_ex_vivo, ...
    tissue_params_in_vivo];


%%
r_eff_reference = cell(length(mr_protocols), size(scaling_factors,2));
r_eff_simulated = cell(length(mr_protocols), size(scaling_factors,2));
for scanner_index = 1:length(mr_protocols)
    for scaling_factor_index = 1:size(scaling_factors,2)

    % get histograms with tissue scaling
    [r_roi_counts, ...
        r_eff_reference{scanner_index,scaling_factor_index}] = ...
        get_histology_data(...
        fullfile(getenv("MRV_DATA_PATH")),...
        opt.sim_params.r_bin_edges,...
        opt.sim_params.radius_approximation,...
        "scaling_factor", scaling_factors(scanner_index, ...
            scaling_factor_index));

    % compute matrix signals
    signals_per_roi = compute_ensemble_weighted_signal( ...
        opt.sim_params.r_bin_centers, ...
        r_roi_counts, ...
        squeeze(signal_luts{scanner_index}));
    r_eff_simulated{scanner_index,scaling_factor_index} = ...
        simulate_experimental_r_eff_estimation( ...
        signals_per_roi, ...
        mr_protocols{scanner_index}, ...
        tissue_params(scanner_index).d_0, ...
        "powder_average", "gaussian_ml", ...
        "f_im_estimate", tissue_params(scanner_index).f_im);
    end
end

%% plot
% set up subplots
fig_handle  = figure;
set(fig_handle, get_default_figure_settings());
set(gcf,'units','centimeters','position',[0, 0, 12, 8]);
layout = tiledlayout(1, 2, ...
    "TileSpacing", "compact", ...
    "Padding", "tight");
color_order = get_default_color_order();
plot_axes = gobjects(1, 2);

scanner_names = [...
    "\textbf{ex-vivo}",...
    "\textbf{in-vivo}"];

scaling_factor_prefixes = ["Rat CC ", "Human CC ", "Human CST "];

% plot correlations for each configuration
for scanner_index = 1:length(tissue_params)   

    % create inner layout to position title above legend
    inner_layout = tiledlayout(layout, 1, 1, ...
        "TileSpacing", "tight", ...
        "Padding", "tight");
    inner_layout.Layout.Tile = scanner_index;
    title_str = scanner_names(scanner_index);
    title(inner_layout, ...
        title_str, ...
        "FontSize", 10, ...
        'interpreter', 'latex');
    plot_axes(scanner_index) = nexttile(inner_layout);
    hold on;
    
    % plot actual correlation
    for scaling_factor_index = 1:size(scaling_factors,2)
        plot_r_eff_correlation_ensemble( ...
            plot_axes(scanner_index), ...
            r_eff_reference{scanner_index, scaling_factor_index}, ...
            r_eff_simulated{scanner_index, scaling_factor_index}, ...
            'color', color_order(scaling_factor_index,:), ...
            'xlim', [0 5], ...
            'ylim', [0 4], ...
            'plot_error_metrics', false, ...
            'legend_prefix', ...
            scaling_factor_prefixes(scaling_factor_index));  
        xlabel('$r_{\mathrm{eff}}$ [$\mu$m] (histology)', ...
            'Interpreter', 'latex');
        ylabel("$r_{\mathrm{eff}}$ [$\mu$m] (dMRI sim.)", ...
            'Interpreter', 'latex');
        lgd = legend('Interpreter', 'latex', ...
            'Location', 'northoutside', ...
            'FontSize', 6);
        lgd.ItemTokenSize(1) = 15;
    end
end
 
% save figure
print(gcf, '-dsvg', "scaling_behavior.svg");
