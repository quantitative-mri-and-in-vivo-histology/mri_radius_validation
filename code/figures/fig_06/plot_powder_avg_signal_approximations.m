% ========================================================================
% Plot different signal approximations of the powder-averaged signal,
% for multiple in-vivo protocols and our experimental ex-vivo protocol.
% ========================================================================

%% setup
sim_params = get_default_simulation_parameters();

mr_protocol_ex_vivo = MrProtocol.fromJsonFile(...
    "../../../parameters/mr_protocol_ex_vivo_experimental.json");
tissue_params_ex_vivo = jsondecode(fileread( ...
    "../../../parameters/tissue_params_ex_vivo.json"));
signal_lut_ex_vivo = load(fullfile(getenv("MRV_DATA_PATH"), ...
    "simulations/signal_per_radius_ex_vivo_experimental.mat"));

mr_protocol_in_vivo = MrProtocol.fromJsonFile( ...
    "../../../parameters/mr_protocol_in_vivo_experimental.json");
tissue_params_in_vivo = jsondecode(fileread( ....
    "../../../parameters/tissue_params_in_vivo.json"));
signal_lut_in_vivo = load(fullfile(getenv("MRV_DATA_PATH"), ...
    "/simulations/signal_per_radius_in_vivo_experimental.mat"));

% set up histology scaling factors
in_vivo_scaling_factors = [0.5 1 1.15]*1.3;
ex_vivo_scaling_factors = [0.5 1 1.15]*1.0;
scaling_factors = [in_vivo_scaling_factors;
    ex_vivo_scaling_factors];

signal_luts_matrix = {signal_lut_ex_vivo.signal_per_r, ...
    squeeze(signal_lut_in_vivo.signal_per_r)};
mr_protocols = {mr_protocol_ex_vivo, mr_protocol_in_vivo};
tissue_params = [...
    tissue_params_ex_vivo, ...
    tissue_params_in_vivo];

%%
gyroMagnRatio =  267.513*10^(-6);
r_eff_plot = 0:0.01:6;
sig_powder_avg_matrix = cell(1, length(mr_protocols));
sig_powder_avg_gpa = cell(1, length(mr_protocols));
sig_powder_avg_wpa = cell(1, length(mr_protocols));
sig_powder_avg_taylor = cell(1, length(mr_protocols));
sig_powder_avg_exponential = cell(1, length(mr_protocols));
r_eff_reference = cell(1, length(mr_protocols));
kappa_values = cell(1, length(mr_protocols));

for scanner_index = 1:length(mr_protocols)

    % get histograms with tissue scaling
    [r_roi_counts, r_eff_reference{scanner_index}] = get_histology_data(...
        fullfile(getenv("MRV_DATA_PATH")),...
        sim_params.r_bin_edges,...
        sim_params.radius_approximation,...
        "scaling_factor", ...
        tissue_params(scanner_index).histology_scaling_factor);

    % compute matrix signals
    signals_per_roi_matrix = compute_ensemble_weighted_signal( ...
        sim_params.r_bin_centers, ...
        r_roi_counts, ...
        squeeze(signal_luts_matrix{scanner_index}));
    [~, sig_powder_avg_matrix{scanner_index}] = ...
        simulate_experimental_r_eff_estimation( ...
        signals_per_roi_matrix, ...
        mr_protocols{scanner_index}, ...
        tissue_params(scanner_index).d_0, ...
        "noise_type", "", ...
        "powder_average", "gaussian_ml", ...
        "f_im_estimate", tissue_params(scanner_index).f_im);
    
    % compute gpa signals
    signal_lut_gpa = simulate_signals_single_axon( ...
        sim_params.r_bin_centers, ...
        mr_protocols{scanner_index}, ...
        tissue_params(scanner_index), ...
        "signal_approximation", "gpa");
    signals_per_roi_gpa = compute_ensemble_weighted_signal( ...
        sim_params.r_bin_centers, ...
        r_roi_counts, ...
        squeeze(signal_lut_gpa));
    [~, sig_powder_avg_gpa{scanner_index}] = ...
        simulate_experimental_r_eff_estimation( ...
        signals_per_roi_gpa, ...
        mr_protocols{scanner_index}, ...
        tissue_params(scanner_index).d_0, ...
        "noise_type", "", ...
        "powder_average", "gaussian_ml", ...
        "f_im_estimate", tissue_params(scanner_index).f_im);

    % compute wpa signals
    signal_lut_wpa = simulate_signals_single_axon( ...
        sim_params.r_bin_centers, ...
        mr_protocols{scanner_index}, ...
        tissue_params(scanner_index), ...
        "signal_approximation", "wpa");
    signals_per_roi_wpa = compute_ensemble_weighted_signal( ...
        sim_params.r_bin_centers, ...
        r_roi_counts, ...
        squeeze(signal_lut_wpa));
    [~, sig_powder_avg_wpa{scanner_index}] = ...
        simulate_experimental_r_eff_estimation( ...
        signals_per_roi_wpa, ...
        mr_protocols{scanner_index}, ...
        tissue_params(scanner_index).d_0, ...
        "noise_type", "", ...
        "powder_average", "gaussian_ml", ...
        "f_im_estimate", tissue_params(scanner_index).f_im);
    
    % compute constants for powder average signal models
    kappa_values{scanner_index} = ...
        7/48.*mr_protocols{scanner_index}.gradient_amplitude_per_shell.^2 ...
        .*gyroMagnRatio.^2 ...
        .*mr_protocols{scanner_index}.gradient_duration_per_shell ...
        ./tissue_params(scanner_index).d_0;   
    f_a = compute_t2w_signal_fractions(mr_protocols{scanner_index}.t_e, ...
        tissue_params(scanner_index).f_0, ...
        tissue_params(scanner_index).t_2_a, ...
        tissue_params(scanner_index).t_2_e, ...
        tissue_params(scanner_index).f_im);
    beta = f_a.*sqrt(pi)./sqrt(4.*tissue_params(scanner_index).d_a_par);
    
    % compute taylor approximation
    sig_powder_avg_taylor{scanner_index} = ...
        beta./sqrt(mr_protocols{scanner_index}.bval_per_shell) ...
        .*(1-kappa_values{scanner_index}.*(r_eff_plot'.^4)');

    % compute exponential approximation
    sig_powder_avg_exponential{scanner_index} = ...
        beta./sqrt(mr_protocols{scanner_index}.bval_per_shell)...
        .*exp(-kappa_values{scanner_index}.*(r_eff_plot'.^4)');
end



%% figure
% set up figure
fig_handle  = figure;
set(fig_handle, get_default_figure_settings());
set(gcf,'units','centimeters','position',[0, 0, 18.4, 7.3]);
color_order = get_default_color_order();
layout = tiledlayout(1, 2*length(mr_protocols));
layout.TileSpacing = "compact";
layout.Padding = "tight";
markers = "o";
plot_axes = gobjects(length(mr_protocols), 2);
xlims_corr = [0 7.5];
ylims_corr = [0 1.4*4.5];
xtick_vals = 0:1:7;
ytick_vals = 0:1:6;
ylims = [0 0.23];
scanner_names = ["\textbf{ex-vivo}",...
    "\textbf{in-vivo}"];
ylims_per_b = [0.0 0.38; 0 0.38];
desc_per_b = ["min", "max"];
inset_x_coords = zeros(length(mr_protocols), 2, 2);
inset_y_coords = zeros(length(mr_protocols), 2, 2);


for scanner_index = 1:length(mr_protocols)
    for b_shell_index = 1:2
        plot_axes(scanner_index, b_shell_index) = nexttile(layout, [1 1]);
        hold on;
        
        % get lowest and highest b-shell index
        if (b_shell_index == 1)
            b_index = 1;
        else
            b_index = size(sig_powder_avg_matrix{scanner_index}, 1);
        end

        % matrix method 
        plot(r_eff_reference{scanner_index}, ...
             sig_powder_avg_matrix{scanner_index}(b_index,:), ...
             "o", ...
            "Color", color_order(scanner_index,:),...
            "MarkerEdgeColor", color_order(1,:), ...
            "MarkerSize", 5, ...
            'DisplayName', "Matrix method",...
            "HandleVisibility", "on"); 

        % GPA 
        plot(r_eff_reference{scanner_index}, ...
             sig_powder_avg_gpa{scanner_index}(b_index,:), ...
             "x", ...
            "Color", color_order(scanner_index,:),...
            "MarkerEdgeColor", color_order(2,:), ...
            "MarkerSize", 5, ...
            'DisplayName', "GPA",...
            "HandleVisibility", "on"); 

        % WPA
        plot(r_eff_reference{scanner_index}, ...
             sig_powder_avg_wpa{scanner_index}(b_index,:), ...
             "+", ...
            "Color", color_order(scanner_index,:),...
            "MarkerEdgeColor", color_order(3,:), ...
            "MarkerSize", 5, ...
            'DisplayName', "WPA",...
            "HandleVisibility", "on");

        % Taylor approx.
        plot(r_eff_plot, ...
             sig_powder_avg_taylor{scanner_index}(b_index,:), ...
             "-", ...
            "Color", 'r',...
            "MarkerEdgeColor", color_order(3,:), ...
            "MarkerSize", 5, ...
            'DisplayName', "Taylor approx.",...
            "HandleVisibility", "on");

        % exponential approx.
        plot(r_eff_plot, ...
             sig_powder_avg_exponential{scanner_index}(b_index,:), ...
             "-", ...
            "Color", 'k',...
            "MarkerEdgeColor", color_order(3,:), ...
            "MarkerSize", 5, ...
            'DisplayName', "Exponential approx.",...
            "HandleVisibility", "on");

        box on;
        pbaspect([1 1 1]);
        xticks(xtick_vals);
        xlim(xlims_corr);
        ylim(ylims_per_b(b_shell_index,:));
        xlabel('$r_{\mathrm{eff}}$ [$\mu$m] (histology)', ...
            'Interpreter', 'latex');
        ylabel(sprintf("$S^{\\circ}(b_{\\mathrm{%s}})$", ...
            desc_per_b(b_shell_index)), ...
            'Interpreter', 'latex');
        
        title_str = "";
        % if b_shell_index == 1
        %     title_str = title_str ...
        %     + scanner_names(scanner_index) + newline + newline;
        % end
        title_str = title_str + sprintf( ...
            "$b_{\\mathrm{%s}} = %.1f~$ms$/\\mu$m$^2$" + newline + ...
            "$\\kappa = %.1e$", ...
            desc_per_b(b_shell_index), ...
            mr_protocols{scanner_index}.bval_per_shell(b_index), ...
            kappa_values{scanner_index}(b_index));
        title(title_str, 'Interpreter', 'latex');

        % store min and max of ROIs for magnified insets
        ensemble_values = [sig_powder_avg_matrix{scanner_index}(b_index,:), ...
            sig_powder_avg_gpa{scanner_index}(b_index,:), ...
            sig_powder_avg_wpa{scanner_index}(b_index,:), ...
        ];
        inset_y_coords(scanner_index, b_shell_index, :) = ...
            [min(ensemble_values) max(ensemble_values)];
        inset_x_coords(scanner_index, b_shell_index, :) = ...
            [min(r_eff_reference{scanner_index}), 
            max(r_eff_reference{scanner_index})];

    end
end

lgd = legend("NumColumns", 5, 'Interpreter','latex');
lgd.Layout.Tile = 'North';
lgd.ItemTokenSize(1) = 10;

% show magnified view of ROIs in insets
for scanner_index = 1:length(mr_protocols)
    for b_index = 1:2
        axes(plot_axes(scanner_index, b_index));
        inset_xlims = squeeze(inset_x_coords(scanner_index,b_index,:))';
        inset_ylims = squeeze(inset_y_coords(scanner_index,b_index,:))';
        range_factor = 0.2;
        inset_xlims_range = inset_xlims(2)-inset_xlims(1);
        inset_ylims_range = inset_ylims(2)-inset_ylims(1);
        inset_xlims = inset_xlims + [-1 1].*range_factor.*inset_xlims_range;
        inset_ylims = inset_ylims + [-1 1].*range_factor.*inset_ylims_range;

        plot_inset(plot_axes(scanner_index, b_index), ...
            [0.25 0.55 0.65 0.4], ...
            inset_xlims, ...
            inset_ylims);
    end
end
% add_subfigure_labels(reshape(plot_axes', 1, numel(plot_axes)),...
%     "char", "pos", [-0.22, 1.07]);

% save figure
exportgraphics(gcf, "powder_avg_signal_approximations.eps", ...
    'Resolution', 300);
print(gcf, '-dsvg', "powder_avg_signal_approximations.svg");
