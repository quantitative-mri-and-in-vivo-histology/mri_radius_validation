% ========================================================================
% Plot quantitative comparison of r_eff between modalities.
%
% Compare r_eff values from dMRI experiments and simulations against
% histology values.
% ========================================================================

%% set up
roi_info_table = readtable(fullfile(getenv("MRV_DATA_PATH"), ...
    "histology/rawdata/roiinfo.tsv"), ...
    "FileType", "text", ...
    "Delimiter", "\t", ...
    "TextType", "string");
sim_params = get_default_simulation_parameters();
cc_eval_params = jsondecode(fileread(...
    "../../../parameters/cc_evaluation_parameters.json"));


%% ex-vivo dMRI simulations
% load parameters and signal LUT for ex-vivo simulations
mr_protocol_ex_vivo = MrProtocol.fromJsonFile(...
    "../../../parameters/mr_protocol_ex_vivo_experimental.json");
tissue_params_ex_vivo = jsondecode(fileread( ...
    "../../../parameters/tissue_params_ex_vivo.json"));
signal_lut_ex_vivo = load(fullfile(getenv("MRV_DATA_PATH"), ...
    "/simulations/signal_per_radius_ex_vivo_experimental.mat"));

% get ex-vivo-like axon radius distributions and r_eff
[r_roi_counts_ex_vivo, r_eff_reference_ex_vivo] = get_histology_data(...
    fullfile(getenv("MRV_DATA_PATH")),...
    sim_params.r_bin_edges,...
    sim_params.radius_approximation,...
    "scaling_factor", tissue_params_ex_vivo.histology_scaling_factor);

% compute ROI signals
signals_per_roi_ex_vivo = compute_ensemble_weighted_signal( ...
    sim_params.r_bin_centers, ...
    r_roi_counts_ex_vivo, ...
    squeeze(signal_lut_ex_vivo.signal_per_r));

% simulate effective radius estimation from signals
% for experimental SNR and idealized scenario (SNR = inf)
rand_stream = RandStream( ...
    sim_params.random_generator, 'Seed', sim_params.random_seed);
r_eff_simulated_experiment_like_ex_vivo = ...
    simulate_experimental_r_eff_estimation( ...
    signals_per_roi_ex_vivo, ...
    mr_protocol_ex_vivo, ...
    tissue_params_ex_vivo.d_0, ...
    "noise_type", "rician", ...
    "powder_average", "rician_ml", ...
    "noise_level", 1./mr_protocol_ex_vivo.snr, ...
    "noise_level_estimate", 1./mr_protocol_ex_vivo.snr, ...
    "f_im_estimate", tissue_params_ex_vivo.f_im, ...
    "rand_stream", rand_stream);
rand_stream = RandStream( ...
    sim_params.random_generator, 'Seed', sim_params.random_seed);
r_eff_simulated_idealized_ex_vivo = ...
    simulate_experimental_r_eff_estimation( ...
    signals_per_roi_ex_vivo, ...
    mr_protocol_ex_vivo, ...
    tissue_params_ex_vivo.d_0, ...
    "noise_type", "", ...
    "powder_average", "gaussian_ml", ...
    "f_im_estimate", tissue_params_ex_vivo.f_im, ...
    "rand_stream", rand_stream);


%% in-vivo dMRI simulations
% load parameters and signal LUT for in-vivo simulations
mr_protocol_in_vivo = MrProtocol.fromJsonFile(...
    "../../../parameters/mr_protocol_in_vivo_experimental.json");
tissue_params_in_vivo = jsondecode(fileread( ...
    "../../../parameters/tissue_params_in_vivo.json"));
signal_lut_in_vivo = load(fullfile(getenv("MRV_DATA_PATH"), ...
    "simulations/signal_per_radius_in_vivo_experimental.mat"));

% get in-vivo-like axon radius distributions and r_eff
[r_roi_counts_in_vivo, r_eff_reference_in_vivo] = get_histology_data(...
    fullfile(getenv("MRV_DATA_PATH")), ...
    sim_params.r_bin_edges, ...
    sim_params.radius_approximation, ...
    "scaling_factor", tissue_params_in_vivo.histology_scaling_factor);

% compute ROI signals
signals_per_roi_in_vivo = compute_ensemble_weighted_signal( ...
    sim_params.r_bin_centers, ...
    r_roi_counts_in_vivo, ...
    squeeze(signal_lut_in_vivo.signal_per_r));

% simulate effective radius estimation from signals
% for experimental SNR and idealized scenario (SNR = inf)
rand_stream = RandStream( ...
    sim_params.random_generator, 'Seed', sim_params.random_seed);
r_eff_simulated_experiment_like_in_vivo = ...
    simulate_experimental_r_eff_estimation( ...
    signals_per_roi_in_vivo, ...
    mr_protocol_in_vivo, ...
    tissue_params_in_vivo.d_0, ...
    "noise_type", "rician", ...
    "powder_average", "rician_ml", ...
    "noise_level", 1./mr_protocol_in_vivo.snr, ...
    "noise_level_estimate", 1./mr_protocol_in_vivo.snr, ...
    "f_im_estimate", tissue_params_in_vivo.f_im, ...
    "rand_stream", rand_stream);
rand_stream = RandStream( ...
    sim_params.random_generator, 'Seed', sim_params.random_seed);
r_eff_simulated_idealized_in_vivo = ...
    simulate_experimental_r_eff_estimation( ...
    signals_per_roi_in_vivo, ...
    mr_protocol_in_vivo, ...
    tissue_params_in_vivo.d_0, ...
    "noise_type", "", ...
    "powder_average", "gaussian_ml", ...
    "f_im_estimate", tissue_params_in_vivo.f_im, ...
    "rand_stream", rand_stream);


%% in-vivo dMRI experiments
% compute r_eff for experimental data
processed_data_dir = fullfile(getenv("MRV_DATA_PATH"), ...
    "mri_in_vivo/processed");
processed_subj_dir_fstructs = dir(fullfile(processed_data_dir, "sub*"));

subject_id_first = sscanf(processed_subj_dir_fstructs(1).name, 'sub-%s');
r_eff_image_example = niftiread(fullfile(processed_data_dir, ...
    sprintf("sub-%s/dwi/sub-%s_effectiveRadius.nii.gz", ...
    subject_id_first, subject_id_first)));

r_eff_mri_values = cell(height(roi_info_table), 1);
r_eff_mri_mean_values_per_subject = ...
    zeros(height(roi_info_table), length(processed_subj_dir_fstructs));
r_eff_mri_values_per_sub = ...
    zeros(height(roi_info_table), length(processed_subj_dir_fstructs));

for subject_id_index = 1:length(processed_subj_dir_fstructs)
    subject_id = sscanf( ...
        processed_subj_dir_fstructs(subject_id_index).name, 'sub-%s');

    % read images
    r_eff_image_file = fullfile(processed_data_dir, ...
        sprintf("sub-%s/dwi/" + ...
        "sub-%s_roi-cc_desc-smoothed_effectiveRadius.nii.gz", ...
        subject_id, subject_id));
    r_eff_image = niftiread(r_eff_image_file);
    fa_image = niftiread(fullfile(processed_data_dir, ...estimates
        sprintf("sub-%s/dwi/sub-%s_FA.nii.gz", ...
        subject_id, subject_id)));
    cc_atlas_mask = niftiread(fullfile(processed_data_dir, ...
        sprintf("sub-%s/dwi/" + ...
        "sub-%s_label-ccMid_mask.nii.gz", ...
        subject_id, subject_id)));

    % exclude values outside corpus callosum
    cc_mask = cc_atlas_mask > 0 ...
        & fa_image >= cc_eval_params.fa_min ...
        & r_eff_image >= cc_eval_params.r_eff_min;
    r_eff_image(~cc_mask) = nan;

    % extract values at ROI coordinates
    loc_table = readtable(fullfile(processed_data_dir, ...
        sprintf("sub-%s/dwi/sub-%s_roiinfo.tsv", ...
        subject_id, subject_id)), ...
        "FileType", "text", ...
        "Delimiter", "\t");
    sub_table = loc_table(:, ...
        ["native_voxel_x", "native_voxel_y", "native_voxel_z"]);  
    loc_voxels = int16(round(sub_table.Variables)+1);
    for roi_index = 1:length(r_eff_mri_values)
        x = loc_voxels(roi_index,1);
        y = loc_voxels(roi_index,2);
        z = loc_voxels(roi_index,3);
        r_eff_mri_values_per_sub(roi_index, subject_id_index) = ...
            r_eff_image(x, y, z);
    end
end

% filter ROIs with less than 3 subjects
valid_idx = sum(~isnan(r_eff_mri_values_per_sub),2) >= 3; 
r_eff_mri_mean_values = mean(r_eff_mri_values_per_sub, 2, 'omitnan');
r_eff_histo_mean_values = r_eff_reference_in_vivo';
r_eff_mri_mean_values = r_eff_mri_mean_values(valid_idx);
r_eff_histo_mean_values = r_eff_histo_mean_values(valid_idx);


%% ex-vivo dMRI experiments
% set data paths for experimental ex-vivo dMRI data
ex_vivo_data_dir = fullfile(getenv("MRV_DATA_PATH"), "mri_ex_vivo");
ex_vivo_processed_data_dir = fullfile(ex_vivo_data_dir, "processed");
ex_vivo_masks_data_dir = fullfile(ex_vivo_data_dir, "masks");

% copy ROI info table for ex-vivo data (only sub-ev01) and
% add column for r_eff from dMRI experiments
ex_vivo_table = roi_info_table(roi_info_table.subject_id == "ev01", :);
ex_vivo_table.r_eff_mri_median = nan(height(ex_vivo_table), 1);
roi_mask_fstructs = ...
    dir(fullfile(ex_vivo_masks_data_dir, "**/dwi/*roi*.nii.gz"));

% collect r_eff values for ex-vivo dMRI ROIs
for roi_index = 1:length(roi_mask_fstructs)

    % extract sub, sample and roi tags
    pattern = "sub-([^_]+)_sample-(\d+)_roi-([^_]+)";
    matches = regexp(roi_mask_fstructs(roi_index).name, pattern, ...
        'tokens', 'once');
    subject_id = sscanf(matches{1}, '%s');
    sample_id = sscanf(matches{2}, '%d');
    roi_id = string(matches{3});
    
    % read ROI mask
    roi_mask_file = fullfile(roi_mask_fstructs(roi_index).folder, ...
        roi_mask_fstructs(roi_index).name);
    roi_mask = niftiread(roi_mask_file);

    % read effective radius image
    effective_radius_image_file = ...
        fullfile(ex_vivo_processed_data_dir, ...
        sprintf("sub-%s", subject_id), ...
        "dwi", ...
        sprintf("sub-%s_sample-%02d_effectiveRadius.nii.gz", ...
        subject_id, sample_id));
    effective_radius_image = niftiread(effective_radius_image_file);
      
    % compute ROI median effective radius
    mri_effective_radii_roi = effective_radius_image(roi_mask > 0);
    mri_effective_radii_roi_median = ...
        median(mri_effective_radii_roi, 'omitnan');
    
   % store ROI median effective radius in table
    row_index = ex_vivo_table.subject_id == subject_id...
        & ex_vivo_table.roi_id == roi_id; 
    ex_vivo_table.r_eff_mri_median(row_index) = ...
        mri_effective_radii_roi_median;
end


%% plots
% set up figure
fig_handle  = figure;
set(fig_handle, get_default_figure_settings());
set(gcf,'units','centimeters','position',[0, 0, 18.4, 10.0]);
t = tiledlayout(1,3);
t.TileSpacing = "compact";
t.Padding = "tight";
color_order = get_default_color_order();
color_ex_vivo = color_order(2,:);
color_in_vivo = color_order(1,:);
legend_prefix_ex_vivo = "ex-vivo ";
legend_prefix_in_vivo = "in-vivo ";
lims = [0 4];

% plot experiment-like simulation
ax_experiments = nexttile(t);
rand_stream = RandStream(sim_params.random_generator, ...
    'Seed', sim_params.random_seed);
plot_r_eff_correlation_ensemble(ax_experiments, ...
    r_eff_reference_ex_vivo(ex_vivo_table.unique_id), ...
    ex_vivo_table.r_eff_mri_median, ...
    'color', color_ex_vivo, ...
    'legend_prefix', legend_prefix_ex_vivo, ...
    'xlim', lims, ...
    'ylim', lims, ...
    'rand_stream', rand_stream);
rand_stream = RandStream(sim_params.random_generator, ...
    'Seed', sim_params.random_seed);
plot_r_eff_correlation_ensemble(ax_experiments, ...
    r_eff_histo_mean_values', ...
    r_eff_mri_mean_values, ...
    'color', color_in_vivo, ...
    'legend_prefix', legend_prefix_in_vivo, ...
    'xlim', lims, ...
    'ylim', lims, ...
    'rand_stream', rand_stream);
xlabel('$r_{\mathrm{eff}}$ [$\mu$m] (histology)', ...
    'Interpreter', 'latex');
ylabel("$r_{\mathrm{eff}}$ [$\mu$m]" + newline ...
    + "(dMRI experiments)", ...
    'Interpreter', 'latex');
lgd = legend('Interpreter', 'latex', ...
    'Location', 'northoutside', ...
    'FontSize', 7);
lgd.ItemTokenSize(1) = 10;

% plot experiment-like simulation
ax_experiment_like = nexttile(t);
rand_stream = RandStream(sim_params.random_generator, ...
    'Seed', sim_params.random_seed);
plot_r_eff_correlation_ensemble(ax_experiment_like, ...
    r_eff_reference_ex_vivo, ...
    r_eff_simulated_experiment_like_ex_vivo, ...
    'color', color_ex_vivo, ...
    'legend_prefix', legend_prefix_ex_vivo, ...
    'xlim', lims, ...
    'ylim', lims, ...
    'rand_stream', rand_stream);
rand_stream = RandStream(sim_params.random_generator, ...
    'Seed', sim_params.random_seed);
plot_r_eff_correlation_ensemble(ax_experiment_like, ...
    r_eff_reference_in_vivo, ...
    r_eff_simulated_experiment_like_in_vivo, ...
    'color', color_in_vivo, ...
    'legend_prefix', legend_prefix_in_vivo, ...
    'xlim', lims, ...
    'ylim', lims, ...
    'rand_stream', rand_stream);
xlabel('$r_{\mathrm{eff}}$ [$\mu$m] (histology)', ...
    'Interpreter', 'latex');
ylabel("$r_{\mathrm{eff}}$ [$\mu$m]" + newline ...
    + "(experiment-like dMRI sim.)", ...
    'Interpreter', 'latex');
lgd = legend('Interpreter', 'latex', ...
    'Location', 'northoutside', ...
    'FontSize', 7);
lgd.ItemTokenSize(1) = 10;

% plot idealized simulation
ax_idealized = nexttile(t);
rand_stream = RandStream(sim_params.random_generator, ...
    'Seed', sim_params.random_seed);
plot_r_eff_correlation_ensemble(ax_idealized, ...
    r_eff_reference_ex_vivo, ...
    r_eff_simulated_idealized_ex_vivo, ...
    'color', color_ex_vivo, ...
    'legend_prefix', legend_prefix_ex_vivo, ...
    'xlim', lims, ...
    'ylim', lims, ...
    'rand_stream', rand_stream);
rand_stream = RandStream(sim_params.random_generator, ...
    'Seed', sim_params.random_seed);
plot_r_eff_correlation_ensemble(ax_idealized, ...
    r_eff_reference_in_vivo, ...
    r_eff_simulated_idealized_in_vivo, ...
    'color', color_in_vivo, ...
    'legend_prefix', legend_prefix_in_vivo, ...
    'xlim', lims, ...
    'ylim', lims, ...
    'rand_stream', rand_stream);
xlabel('$r_{\mathrm{eff}}$ [$\mu$m] (histology)', ...
    'Interpreter', 'latex');
ylabel("$r_{\mathrm{eff}}$ [$\mu$m]" + newline ...
    + "(idealized dMRI sim.)", ...
    'Interpreter', 'latex');
lgd = legend('Interpreter', 'latex', ...
    'Location', 'northoutside', ...
    'FontSize', 7);
lgd.ItemTokenSize(1) = 10;

% save figure
print(gcf, '-dsvg', "quantitative_comparison.svg");