% ========================================================================
% Plot in-vivo results per subjects (Spat. patterns and correlation)
% ========================================================================

%% compute r_eff for simulations
roi_info_table = readtable( ...
    fullfile(getenv("MRV_DATA_PATH"), ...
    "histology/rawdata/roiinfo.tsv"), ...
    "FileType", "text", ...
    "Delimiter", "\t", ...
    "TextType", "string");
sim_params = get_default_simulation_parameters();
cc_eval_params = jsondecode(fileread(...
    "../../../parameters/cc_evaluation_parameters.json"));

% convert OMM coordinates to matlab's one-based indexing
roi_info_table.omm_voxel_x = roi_info_table.omm_voxel_x + 1;
roi_info_table.omm_voxel_y = roi_info_table.omm_voxel_y + 1;
roi_info_table.omm_voxel_z = roi_info_table.omm_voxel_z + 1;


%% in-vivo dMRI simulations
% load parameters and signal LUT for in-vivo simulations
mr_protocol_in_vivo = MrProtocol.fromJsonFile(...
    "../../../parameters/mr_protocol_in_vivo_experimental.json");
tissue_params_in_vivo = jsondecode(fileread( ...
    "../../../parameters/tissue_params_in_vivo.json"));

% get ex-vivo-like axon radius distributions and r_eff
[r_roi_counts_in_vivo, r_eff_reference_in_vivo] = get_histology_data(...
    fullfile(getenv("MRV_DATA_PATH")),...
    sim_params.r_bin_edges,...
    sim_params.radius_approximation,...
    "scaling_factor", tissue_params_in_vivo.histology_scaling_factor);


%% in-vivo dMRI experiments
% compute r_eff for experimental data
processed_data_dir = fullfile(getenv("MRV_DATA_PATH"), ...
    "mri_in_vivo/processed");
processed_subj_dir_fstructs = dir(fullfile(processed_data_dir, "sub*"));

subject_id_first = sscanf(processed_subj_dir_fstructs(1).name, 'sub-%s');
r_eff_image_example = niftiread(fullfile(processed_data_dir, ...
    sprintf("sub-%s/dwi/sub-%s_effectiveRadius.nii.gz", ...
    subject_id_first, subject_id_first)));

r_eff_mri_values = cell(height(roi_info_table), 1);
r_eff_mri_mean_values_per_subject = ...
    zeros(height(roi_info_table), length(processed_subj_dir_fstructs));
r_eff_mri_values_per_sub = ...
    zeros(height(roi_info_table), length(processed_subj_dir_fstructs));

for subject_id_index = 1:length(processed_subj_dir_fstructs)
    subject_id = sscanf( ...
        processed_subj_dir_fstructs(subject_id_index).name, 'sub-%s');

    r_eff_image_file = fullfile(processed_data_dir, ...
        sprintf("sub-%s/dwi/" + ...
        "sub-%s_roi-cc_desc-smoothed_effectiveRadius.nii.gz", ...
        subject_id, subject_id));
    r_eff_image = niftiread(r_eff_image_file);
    fa_image = niftiread(fullfile(processed_data_dir, ...
        sprintf("sub-%s/dwi/sub-%s_FA.nii.gz", ...
        subject_id, subject_id)));
    cc_atlas_mask = niftiread(fullfile(processed_data_dir, ...
        sprintf("sub-%s/dwi/" + ...
        "sub-%s_label-ccMid_mask.nii.gz", ...
        subject_id, subject_id)));

    % exclude values outside corpus callosum
    cc_mask = cc_atlas_mask > 0 ...
        & fa_image >= cc_eval_params.fa_min ...
        & r_eff_image >= cc_eval_params.r_eff_min;
    r_eff_image(~cc_mask) = nan;

    loc_table = readtable(fullfile(processed_data_dir, ...
        sprintf("sub-%s/dwi/sub-%s_roiinfo.tsv", ...
        subject_id, subject_id)), ...
        "FileType", "text", ...
        "Delimiter", "\t");
    sub_table = loc_table(:, ...
        ["native_voxel_x", "native_voxel_y", "native_voxel_z"]);  
    loc_voxels = int16(round(sub_table.Variables)+1);

    for roi_index = 1:length(r_eff_mri_values)
        x = loc_voxels(roi_index,1);
        y = loc_voxels(roi_index,2);
        z = loc_voxels(roi_index,3);
        r_eff_mri_values_per_sub(roi_index, subject_id_index) = ...
            r_eff_image(x, y, z);
    end
end

%% in-vivo dMRI experiments
subject_ids = unique(roi_info_table.subject_id);
cc_atlas_mask_file_omm = fullfile(getenv("MRV_DATA_PATH"), ...
    "mri_in_vivo/templates/masks", ...
    "space-omm_label-ccMid_mask.nii.gz");
cc_atlas_mask_omm = niftiread(cc_atlas_mask_file_omm);

in_vivo_processed_data_dir = fullfile(getenv("MRV_DATA_PATH"), ...
    "mri_in_vivo/processed");
processed_subj_dir_fstructs = dir( ...
    fullfile(in_vivo_processed_data_dir, "sub*"));

in_vivo_r_eff_images_omm = ...
    nan([length(processed_subj_dir_fstructs), size(cc_atlas_mask_omm)]);

r_eff_mri_values_per_sub = ...
    zeros(height(roi_info_table), length(processed_subj_dir_fstructs));

% read per-subject effective radius map in OMM space and segment CC
for subject_id_index = 1:length(processed_subj_dir_fstructs)
    subject_id = sscanf( ...
        processed_subj_dir_fstructs(subject_id_index).name, 'sub-%s');

    % read subject r_eff and FA images
    r_eff_image_omm = niftiread(fullfile(in_vivo_processed_data_dir, ...
        sprintf("sub-%s/dwi/" + ...
        "sub-%s_space-omm_effectiveRadius.nii.gz", ...
        subject_id, subject_id)));
    fa_image_omm =  niftiread(fullfile(in_vivo_processed_data_dir, ...
        sprintf("sub-%s/dwi/" + ...
        "sub-%s_space-omm_FA.nii.gz", ...
        subject_id, subject_id)));

    % set values outside corpus callosum to nan
    % exclude values outside corpus callosum
    cc_mask_omm = cc_atlas_mask_omm > 0 ...
        & fa_image_omm >= cc_eval_params.fa_min ...
        & r_eff_image_omm >= cc_eval_params.r_eff_min;
    r_eff_image_omm(~cc_mask_omm) = nan;
    in_vivo_r_eff_images_omm(subject_id_index,:,:,:) = r_eff_image_omm;

    r_eff_image_file_native = fullfile(processed_data_dir, ...
        sprintf("sub-%s/dwi/" + ...
        "sub-%s_roi-cc_desc-smoothed_effectiveRadius.nii.gz", ...
        subject_id, subject_id));
    r_eff_image_native = niftiread(r_eff_image_file_native);
    fa_image_native =  niftiread(fullfile(in_vivo_processed_data_dir, ...
        sprintf("sub-%s/dwi/sub-%s_FA.nii.gz", ...
        subject_id, subject_id)));

    cc_atlas_mask_native = niftiread(fullfile(processed_data_dir, ...
        sprintf("sub-%s/dwi/" + ...
        "sub-%s_label-ccMid_mask.nii.gz", ...
        subject_id, subject_id)));

    cc_mask_native = cc_atlas_mask_native > 0 ...
        & fa_image_native >= cc_eval_params.fa_min ...
        & r_eff_image_native >= cc_eval_params.r_eff_min;
    r_eff_image_native(~cc_mask_native) = nan;

    loc_table = readtable(fullfile(processed_data_dir, ...
        sprintf("sub-%s/dwi/sub-%s_roiinfo.tsv", ...
        subject_id, subject_id)), ...
        "FileType", "text", ...
        "Delimiter", "\t");
    sub_table = loc_table(:, ...
        ["native_voxel_x", "native_voxel_y", "native_voxel_z"]);  
    loc_voxels = int16(round(sub_table.Variables)+1);
    for roi_index = 1:length(r_eff_mri_values)
        x = loc_voxels(roi_index,1);
        y = loc_voxels(roi_index,2);
        z = loc_voxels(roi_index,3);
        r_eff_mri_values_per_sub(roi_index, subject_id_index) = ...
            r_eff_image_native(x, y, z);
    end

end

n_valid_subjects = squeeze(sum(~isnan(in_vivo_r_eff_images_omm),1));
valid_voxels_mask = n_valid_subjects >= 3;
val_idx_rep = repmat(shiftdim(valid_voxels_mask, -1), ...
    size(in_vivo_r_eff_images_omm,1), 1, 1, 1);
in_vivo_r_eff_images_omm(~val_idx_rep) = nan;
r_eff_image_mean_omm_in_vivo = squeeze( ...
    mean(in_vivo_r_eff_images_omm, 1, 'omitnan'));


%% generate spatial patterns across the corpus callosum for all modalities
cc_atlas_mask_file = fullfile(getenv("MRV_DATA_PATH"), ...
    "mri_in_vivo/templates/masks", ...
    "space-omm_label-ccMid_mask.nii.gz");
cc_atlas_mask = niftiread(cc_atlas_mask_file);
omm_x_midslice_index = roi_info_table.omm_voxel_x(1);
in_vivo_mask = squeeze(cc_atlas_mask(omm_x_midslice_index,:,:) > 0);
plot_omm_z_idx = 83:162;
plot_omm_y_idx = 67:103;
clims_in_vivo = [1 3.5];
clims_ex_vivo = ...
    clims_in_vivo./tissue_params_in_vivo.histology_scaling_factor;
cc_mask_plot = in_vivo_mask ...
    & squeeze(valid_voxels_mask(omm_x_midslice_index, :, :));
cc_mask_plot = cc_mask_plot(plot_omm_z_idx,plot_omm_y_idx)';

% interpolation function to generate corpus callosum patterns
[xGrid, yGrid] = meshgrid(plot_omm_z_idx, ...
    plot_omm_y_idx);
interpolate_cc = @(x, y, vals) ...
    griddata(x, y, vals, xGrid, yGrid, 'nearest')'; 

% compute patterns per donor for in-vivo-like histology and dMRI
% simulations
pattern_size = [length(plot_omm_z_idx), length(plot_omm_y_idx)];

% compute in-vivo across-subject mean pattern for dMRI experiments
r_eff_map_in_vivo_experiments_avg = ...
    squeeze(r_eff_image_mean_omm_in_vivo( ...
        omm_x_midslice_index,plot_omm_z_idx,plot_omm_y_idx));

r_eff_map_in_vivo_experiments_per_subject = ...
    squeeze(in_vivo_r_eff_images_omm( ...
        :,omm_x_midslice_index,plot_omm_z_idx,plot_omm_y_idx));


%% figure: histological patterns
fig_handle  = figure;
set(fig_handle, get_default_figure_settings());
layout = tiledlayout(1, 5, ...
    "TileSpacing", "none", ...
    "Padding", "tight");
set(gcf, ...
    'units', 'centimeters', ...
    'position',[0, 0, 18.4, 5.0]);

for subject_index = 1:size(r_eff_map_in_vivo_experiments_per_subject, 1)
    ax = nexttile(layout);
    mean_r_eff_map_plot = squeeze( ...
        r_eff_map_in_vivo_experiments_per_subject(subject_index,:,:))';
    plot_pattern(ax, ...
        mean_r_eff_map_plot, ...
        cc_mask_plot, ...
        clims_in_vivo);
    title(sprintf("Subject %d", subject_index), ...
        'Interpreter', 'latex');
end
cb = colorbar();
cb.Location = "northoutside";
clim(clims_in_vivo);  % Set color limits based on 'clims'
cb.Label.Interpreter = "latex";
cb.Label.String = "$r_{\mathrm{eff}}$ [$\mu$m]";
cb.Label.FontSize = 10;
cb.Layout.Tile = 'north'; % Position colorbar in the top region

% save_figure
print(gcf, '-dsvg', "patterns_per_subject.svg");


fig_handle  = figure;
set(fig_handle, get_default_figure_settings());
layout = tiledlayout(1, 5, ...
    "TileSpacing", "tight", ...
    "Padding", "tight");
set(gcf, ...
    'units', 'centimeters', ...
    'position',[0, 0, 18.4, 6.0]);
color_order = get_default_color_order();
color_in_vivo = color_order(1,:);
legend_prefix_in_vivo = "in-vivo ";
lims = [0 4];

for subject_index = 1:size(r_eff_map_in_vivo_experiments_per_subject, 1)
    ax = nexttile(layout);    
    r_eff_mri_mean_values = r_eff_mri_values_per_sub(:, subject_index);
    valid_idx = ~isnan(r_eff_mri_mean_values);
    r_eff_histo_mean_values = r_eff_reference_in_vivo';
    r_eff_mri_mean_values(~valid_idx) = nan;

    rand_stream = RandStream(sim_params.random_generator, ...
        'Seed', sim_params.random_seed);
    plot_r_eff_correlation_ensemble( ...
        ax, ...
        r_eff_histo_mean_values', ...
        r_eff_mri_mean_values, ...
        'color', color_in_vivo, ...
        'xlim', lims, ...
        'ylim', lims, ...
        'rand_stream', rand_stream);
    xlabel('$r_{\mathrm{eff}}$ [$\mu$m] (histology)', ...
        'Interpreter', 'latex');
    ylabel("$r_{\mathrm{eff}}$ [$\mu$m] (dMRI)", ...
        'Interpreter', 'latex');
    lgd = legend('Interpreter', 'latex', ...
        'Location', 'northoutside', ...
        'FontSize', 5.2);
    lgd.ItemTokenSize(1) = 10;
end

% save_figure
print(gcf, '-dsvg', "correlations_per_subject.svg");


%% helper functions for plotting patterns
function plot_pattern(ax_handle, image, mask, clims)
    axes(ax_handle);
    hold on;
    axis image;
    axis off;
    image(~mask) = nan;
    valid_data_mask = mask & ~isnan(image);
    h = imagesc(image);
    set(h, 'AlphaData', valid_data_mask>0);
    contour(mask, [0.5 0.5], 'k', 'LineWidth', 0.5);
    clim(clims);
end