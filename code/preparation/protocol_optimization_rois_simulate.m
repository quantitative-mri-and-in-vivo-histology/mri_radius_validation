% ========================================================================
% Simulate effective radii for protocol coordinates and compute metrics.
% ========================================================================

% load signal LUTs
load(fullfile(getenv("MRV_DATA_PATH"), ...
    "simulations/protocol_optimization_per_radius.mat"));

% optimization parameters
scaling_factors = [1 1.3 1.5]';
sim_params.n_noise_realizations = 1000;
snr_factors = [1, 1.75, 2.5];

% compute reference data per snr baseline level
r_roi_counts = cell(1, length(scaling_factors));
r_eff_reference = cell(1, length(scaling_factors));
for scaling_factor_index = 1:length(scaling_factors)
    [r_roi_counts{scaling_factor_index}, ...
        r_eff_reference{scaling_factor_index}] = get_histology_data(...
        fullfile(getenv("MRV_DATA_PATH")),...
        sim_params.r_bin_edges,...
        sim_params.radius_approximation,...
        "scaling_factor", scaling_factors(scaling_factor_index));
end

% simulate noisy r_eff for all protocols and evaluate metrics
data_queue = parallel.pool.DataQueue;
wbar = waitbar(0, 'Evaluating protocols...');
n = length(mr_protocols);
parallel_waitbar_update(n, wbar);
afterEach(data_queue, @parallel_waitbar_update);
results_tables = cell(1, length(mr_protocols));
parfor protocol_index = 1:length(mr_protocols)
    
    mr_protocol = mr_protocols{protocol_index};   
    signal_per_cylinder_intra_axonal = ...
        squeeze(signal_luts_intra_axonal(protocol_index,:,:));
    protocol_table = table();

    for scaling_factor_index = 1:length(scaling_factors)
        signals_per_roi = compute_ensemble_weighted_signal( ...
            sim_params.r_bin_centers, ...
            r_roi_counts{scaling_factor_index}, ...
            signal_per_cylinder_intra_axonal);

        for snr_factor_index = 1:length(snr_factors)
           snr = mr_protocol.snr.*snr_factors(snr_factor_index);
            
          % simulate noisy r_eff
           rand_stream = RandStream(sim_params.random_generator, ...
               'Seed', sim_params.random_seed);
           RandStream.setGlobalStream(rand_stream);
           r_eff_simulated = simulate_experimental_r_eff_estimation( ...
                signals_per_roi, ...
                mr_protocol, ...
                tissue_params.d_0, ...
                "noise_type", "gaussian", ...
                "noise_level", 1./(snr), ...
                "powder_average", "gaussian_ml", ...
                "n_noise_realizations", sim_params.n_noise_realizations, ...
                "rand_stream", rand_stream);
            
           % compute metrics
           rand_stream = RandStream(sim_params.random_generator, ...
               'Seed', sim_params.random_seed);
           RandStream.setGlobalStream(rand_stream);
           [~, ~, corr_r, corr_p, ~, nrmse, fit_success_ratio]...
                = compute_r_eff_correlation_metrics( ...
                r_eff_reference{scaling_factor_index}', r_eff_simulated, ...
            'rand_stream', rand_stream);
            
            % store protocol parameters and metrics
            row = table();
            row.protocol_index = protocol_index;
            row.small_delta = mr_protocol.gradient_duration_per_shell(1);
            row.big_delta = mr_protocol.gradient_separation_per_shell(1);
            row.b_min = mr_protocol.bval_per_shell(1);
            row.b_max = mr_protocol.bval_per_shell(end);            
            row.g_min = mr_protocol.gradient_amplitude_per_shell(1);
            row.g_max = mr_protocol.gradient_amplitude_per_shell(end);
            row.t_e = mr_protocol.t_e;            
            row.snr = snr;
            row.snr_factor = snr_factors(snr_factor_index);
            row.scaling_factor = scaling_factors(scaling_factor_index);
            row.nrmse = nrmse;
            row.R = corr_r;
            row.p = corr_p;
            row.fit_success_ratio = fit_success_ratio;
            protocol_table = [protocol_table; row];
        end
    end
    results_tables{protocol_index} = protocol_table;
    send(data_queue, 1);
end
close(wbar);

results_table = vertcat(results_tables{:});
save(fullfile(getenv("MRV_DATA_PATH"), ...
    "simulations/protocol_optimization_rois.mat"), ...
    "results_table", ...
    "scaling_factors", ...
    "snr_factors", ...
    "sim_params", ...
    "mr_protocols", ...
    "mr_protocol_reference", ...
    "signal_luts_intra_axonal", ...
    "tissue_params", ...
    "g_max_scanners");
